Curso de Javascript do Curso em Vídeo
-------------------------------------------------------

Variáveis e tipos primitivos:

typeof < comando para saber o tipo primitivo
* Number < 5, 18, -12, 0.5, -12.6, etc.
* String < "palavra", 'palavra', `palavra`.
* Boolean < true & false
* Objetc < {}, []
* Function < function(), function{}
* Undefined < undefined

var ou let < variável
= < Recebe
+ < Contatenação, ligação e adição. 
  * (number + number) < adição
  * (string + string) < concatenação

Identificadores:
- Regras
* Podem começar com letra, $ ou _
* Não podem começar com números
* É possível usar acentos e símbolos
* Não podem conter espaços (no lugar usar _)
* Não pode usar palavras reservadas (alert, fuction, var, etc.)

- Dicas
* Letras maiúsculas e minúsculas fazem diferença (A, a, B, b, etc.)
* Tentar escolher nomes coerentes para as variáveis

Conversão de tipos primitivos:

* String para número
	Number.parseInt(n) < converte em números inteiros
	Number.parseFloat(n) < converte em números reais
	Number(n) < o Javascript decide se os valores digitados são inteiros ou reais

* Número para String
	String(n) < Converte número em uma string
	n.toString() < Converte número para uma string

Formatação de Números:

var n1 = '1545.5'
n1.toFixed() < Quantas casas depois da vírgula vão aparecer
  * ex: n1.toFixed(2) = 1545.50
.replace('' , '') Faz a troca de uma coisa por outra
  * ex: n1.toFixed(2).replace('.' , ',') = 1545,50
.toLocaleString < colocar alguma região do mundo
  * ex: n1.toLocaleString('pt-BR')
----- Como converter para Real brasileiro -----
n1.toLocaleString('pt-BR', {style: 'currency', currency: 'BRL'})
'currency' < moeda
currency: < moeda de qual país
BRL < Real brasileiro

Formatação de String:

var s = 'javascript'
'Eu estou aprendendo S' < não faz interpolação
'Estou aprendendo ' + s < usa concatenação
`Estou aprendendo ${s}` < usa template  string (Tem que usar crase ``)
s.length < quantos caracteres a string tem
s.toUpperCase() < tudo para maiúsculas
s.toLowerCase() < tudo para minúsculas

Comandos:

Alert < mostra a mensagem na tela
Prompt < caixa de pergunta
Confirm < Aparece uma caixa para confirmar
write < Escreve a mensagem na tela
writeln < Escreve a mensagem na linha de baixo

Operadores:

---Operadores aritméticos---

+ < adição | 5 + 2 = 7
- < subtração | 5 - 2 = 3
* < multiplicação | 5 * 2 = 10
/ < divisão real | 5 / 2 = 2,5
% < o resto da divisão inteira | 5 % 2 = 1
** < potência | 5 ** 2 = 25

var n = 3
- n = n + 4
N passa a valer 7
- n = n * 2
N passa a valer 14

Se a autoatribuição for apenas com a variável + um número, podemos escrever assim:
n += 4
n *= 2
e assim sucessivamente

----------------------
ordem de precedência |
()       |           |
**       |           |
* / %    |           |
+ -      v           |
----------------------

--Operadores de incremento---

x++ < x = x + 1 Se o x tiver antes do ++, a soma aparece depois (x++), se o x estiver após o ++, a soma já aparece na hora (++x).
x-- < x = x - 1 Se o x tiver antes do --, a subtração aparece depois (x--), se o x estiver após o --, a subtração já aparece na hora (--x)

---Operadores relacionais---

> < Maior que
< < Menor que
>= < Maior ou igual
<= < Menor ou igual
== < Igual
!= < Diferente/não igual

-----------------------------------------------------------------
Operadores relacionais não tem ordem de precedência, ou seja,   |
se ler da esquerda pra direita                                  |
-----------------------------------------------------------------

---Operadores de identidade---

=== < igualdade restrita, se os números são idÊnticos, com mesmo valor e tipo.
!== < desigualdade restrita, o mesmo esquema do ===
ex: 5 == '5' < true
    5 === '5' < false porque não são de mesmo tipo, um é number o outro é string.
    5 != '5' < false
    5 === '5' < true

---Operadores lógicos---

! < negação 
	true == false
	false == true
&& < conjunção (e) binário
	true true == true
	true false == false
	false true == false
	false false == false
|| < disjunção (ou) binário
	true true == true
	true false == true
	false true == true
	false false == false

----------------------
ordem de precedência |
!       | Não        |
&&      | E          |
||      v Ou         |
----------------------

---Operadores ternários---

? < quando o resultado do teste for true
: < quando o resultado do teste for false
----------------------------------
Teste | ? |  true  | : |  false  |
----------------------------------
EX: média >= 7.0 ? 'Aprovado' : 'Reprovado'


--------------------------------------------------------------
ORDEM DE PRECENDÊNCIAS DE OPERADORES DENTRO DE UMA EXPRESÃO: |
ARITMÉTICOS - RELACIONAIS - LÓGICOS - TERNÁRIOS              |
--------------------------------------------------------------